SYMBOLS {
    # K-1013 RAM Banks
    #
    __USRRAM   : type = export, value = $C000;
    __SYSRAM   : type = export, value = $E000;

    # Large transient buffer for COPYF, ETC.
    #
    __LBUFADDR : type = export, value = $A000;
    __LBUFSIZE : type = export, value = $1400;

    # Low RAM
    #
    __LOWRAM   : type = export, value = $0400;

    __KEYSTR   : type = export, value = __LOWRAM;       # (256 bytes) Function key table
    __LEGTBL   : type = export, value = __LOWRAM+$01C0; # (64 bytes) F. key legend table
    __INPLBUF  : type = export, value = __LOWRAM+$0100; # system input line buffer
    __OUTLBUF  : type = export, value = __LOWRAM+$0200; # system output line buffer

    # System RAM
    #
    __SYSTEM   : type = export, value = $0200;

    __SEEIO    : type = export, value = __SYSTEM+$00F9; # I-O space enable semaphore
    __NMIPRC   : type = export, value = __SYSTEM+$00FA; # Jump to NMI processor
    __IRQBRK   : type = export, value = __SYSTEM+$00FD; # Jump to IQR and BRK processor
    __WARMRS   : type = export, value = __SYSTEM+$0100; # Jump to operating system warm reset entry
    __CNTRLC   : type = export, value = __SYSTEM+$0103; # Jump executed when CNTRL-C is entered from console

    __EXINBNK  : type = export, value = $0100;           # Location of the exec in bank routine
}

MEMORY {

# BANK 0
    ZEROPAGE  : start = $0000,                size = $100;
    IODATA    : start = __SYSTEM-$A,          size = $280+$A,      file="build/%%VERSION%%/iodriver.z";
    SCRATCH   : start = __SYSTEM+$0080,       size = $30,          file="";
    IOSCRATCH : start = __SYSTEM+$00B0,       size = $48,          file="";
    IODRVJMP  : start = __SYSTEM+$0106-$A,    size = $90+$A,       file="build/%%VERSION%%/iodriver.z";
    TABTBL    : start = __LOWRAM+$02E0-$A,    size = $20+$A,       file="build/%%VERSION%%/iodriver.z";
    IODRIVER  : start = __USRRAM+$05B0-$A,    size = $CD0+$A,      file="build/%%VERSION%%/iodriver.z";
    CMDPROC   : start = __USRRAM+$1800-$A,    size = $800+$A,      file="build/%%VERSION%%/comdproc.z";
    SVCPROC   : start = __USRRAM+$1D20-$A,    size = $2E0+$A,      file="build/%%VERSION%%/svcproc.z";
    CODOS     : start = __SYSRAM+$600-$B6-$A, size = $1900+$B6+$A, file=%O;

# BANK 1
    CHARTBL   : start = $FD50-$A,             size = $2A0+$A,      file="build/%%VERSION%%/iodriver.z";
}

SEGMENTS {
    zp         : load = ZEROPAGE,  type = zp,  start = $B0;
    iodata     : load = IODATA,    type = rw;
    iodrvjmp   : load = IODRVJMP,  type = rw;
    tabtbl     : load = TABTBL,    type = rw;
    chartbl    : load = CHARTBL,   type = rw;
    scratch0   : load = SCRATCH,   type = bss;
    scratch1   : load = SCRATCH,   type = bss, start = $0283;
    ioscratch0 : load = ZEROPAGE,  type = zp,  start = $F0;
    ioscratch  : load = IOSCRATCH, type = bss;
    cmdproc    : load = CMDPROC,   type = ro;
    svcproc    : load = SVCPROC,   type = ro;
    iodriver   : load = IODRIVER,  type = ro;
    codos      : load = CODOS,     type = rw;
}